{% comment %}
  This section is used in the product template to render product page with
  media, content, and add-to-cart form.

  https://shopify.dev/docs/storefronts/themes/architecture/templates/product
{% endcomment %}

<div class="page-top full-width">
  <div class="page-top-content">
    <div class="made-by">Miserably Employed Exclusive</div>
    <h1 class="product-title">{{ product.title }}</h1>

    <p id="product-price" class="product-price">
      {{ product.selected_or_first_available_variant.price | money }}
      {% if product.selected_or_first_available_variant.compare_at_price
          != product.selected_or_first_available_variant.price
      %}
        <span class="compare-at">{{ product.selected_or_first_available_variant.compare_at_price | money }}</span>
      {% endif %}
    </p>
  </div>
</div>

<div class="product-section">
  <div class="product-images">
    {% assign featured_image = product.selected_or_first_available_variant.featured_image
      | default: product.featured_image
    %}
    <div class="main-image">
      <img
        id="main-product-image"
        src="{{ featured_image | img_url: 'master' }}"
        alt="{{ featured_image.alt | escape }}"
        class="product-image"
      >
    </div>
    <div class="thumbnail-container">
      {% for image in product.images %}
        <div class="thumbnail" data-image-id="{{ image.id }}" data-image-url="{{ image | img_url: 'master' }}">
          <img src="{{ image | img_url: 'small' }}" alt="{{ image.alt | escape }}">
        </div>
      {% endfor %}
    </div>
  </div>

  <div class="product-info">
    {% comment %} I need to make this only show if the product is in stock {% endcomment %}

    <div class="product-description truncated">
      {{ product.description }}
      <button class="read-more-button">
        {{ 'icon-plus.svg' | inline_asset_content }}
      </button>

      <button class="read-less-button">
        {{ 'icon-minus.svg' | inline_asset_content }}
      </button>
    </div>

    <div class="product-form">
      {% form 'product', product %}
        {% assign current_variant = product.selected_or_first_available_variant %}
        <input type="hidden" name="id" id="variant-id" value="{{ current_variant.id }}">

        {%- for option in product.options_with_values -%}
          <div class="product-option product-option-{{ option.name | handleize }}">
            <label>{{ option.name }}</label>
            <div class="option-buttons-wrapper {% if option.name contains 'Color' %}color-option-buttons-wrapper{% endif %}">
              {%- for value in option.values -%}
                <button
                  type="button"
                  class="option-button {% if option.selected_value == value %}active{% endif %}"
                  data-option-name="{{ option.name | handleize }}"
                  data-option-value="{{ value | escape }}"
                  aria-label="{{ option.name }}: {{ value | escape }}"
                >
                  {% if option.name contains 'Color' %}
                    <span
                      class="option-color-swatch"
                      style="background-color: {% render 'color-mapping', color_name: value %}"
                      title="{{ value | escape }}"
                    ></span>
                    <span class="option-color-label visually-hidden">{{ value }}</span>
                  {% else %}
                    {{ value }}
                  {% endif %}
                </button>
              {%- endfor -%}
            </div>
          </div>
        {%- endfor -%}

        <div class="quantity-selector">
          <label for="quantity">Quantity</label>
          <input type="number" id="quantity" name="quantity" min="1" value="1">
        </div>

        <div class="product-actions">
          <button type="submit" id="add-to-cart" class="button bright">Add to cart</button>
          {{ form | payment_button }}
        </div>
      {% endform %}
    </div>
  </div>
</div>

{% stylesheet %}
  .made-by {
    font-size: var(--font-size-lg);
    color: var(--color-secondary);
  }

  .product-title {
    font-size: var(--font-size-xxl);
    margin: 0;
    width: 100%;
    color: var(--color-light);
    margin-top: var(--spacing-sm);
  }

  .product-section {
    display: flex;
    flex-direction: row;
    align-items: flex-start;
    justify-content: flex-start;
    gap: var(--spacing-xl);
    margin: var(--spacing-xl) 0;
    padding: 0 0 var(--spacing-xxl);
    position: relative;

    @media screen and (max-width: 1024px) {
      gap: var(--spacing-lg);
    }
  }

  @media screen and (max-width: 1024px) {
    .product-section {
      flex-direction: column;
      padding: 0;
    }
  }

  .product-images {
    display: flex;
    flex-direction: column;
    gap: var(--spacing-md);
    width: 60%;
    position: sticky;
    top: 0;

    @media screen and (max-width: 1024px) {
      width: 100%;
      flex-direction: column;
    }
  }

  .product-price {
    font-size: var(--font-size-lg);
    font-weight: bold;
    margin-bottom: var(--spacing-md);
    margin-top: var(--spacing-sm);
  }

  .compare-at {
    text-decoration: line-through;
    color: var(--color-secondary);
    margin-left: var(--spacing-xs);
  }

  .product-form {
    width: 100%;
  }

  .main-image {
    width: 100%;
    margin-bottom: var(--spacing-sm);
    background-color: white;
    border-radius: var(--br-md);
    overflow: hidden;
    outline: 2px solid rgba(0, 0, 0, 0.1);
    outline-offset: -2px;
  }

  .main-image img {
    width: 100%;
    height: auto;
    object-fit: cover;
    border-radius: var(--br-md);
    overflow: hidden;
  }

  .thumbnail-container {
    display: flex;
    gap: var(--spacing-sm);
    flex-wrap: wrap;
    flex-direction: row;
    align-items: center;
    justify-content: center;
  }

  .thumbnail {
    width: 60px;
    height: 60px;
    cursor: pointer;
    overflow: hidden;
    outline: 1px solid rgba(0, 0, 0, 0.1);
    outline-offset: -1px;
    transition: border 0.1s ease, outline 0.1s ease;
    border-radius: var(--br-md);
  }

  .thumbnail img {
    width: 100%;
    height: 100%;
    object-fit: cover;
    transition: transform 0.2s ease;
  }

  .thumbnail.active {
    border: 2px solid var(--color-dark);
    outline: 2px solid rgba(255, 255, 255, 1);
    outline-offset: -4px;
  }

  .product-info {
    width: 40%;
    padding: 0;
    display: flex;
    flex-direction: column;
    gap: var(--spacing-sm);
    align-items: flex-start;

    @media screen and (max-width: 1024px) {
      width: 100%;
    }
  }

  @media screen and (max-width: 768px) {
    .product-images,
    .product-info {
      width: 100%;
    }
  }

  .product-option {
    margin-bottom: var(--spacing-md);
    width: 100%;
  }

  .product-option label {
    display: block;
    margin-bottom: var(--spacing-xs);
    font-weight: 500;
  }

  .option-wrapper {
    position: relative;
  }

  .option-selector {
    width: 100%;
  }

  .quantity-selector {
    margin-bottom: var(--spacing-md);
    width: 100%;
  }

  .quantity-selector label {
    display: block;
    margin-bottom: var(--spacing-xs);
    font-weight: 500;
  }

  .quantity-selector input {
    width: 100%;
  }

  .product-actions {
    display: flex;
    flex-direction: column;
    align-items: center;
    justify-content: center;
    gap: var(--spacing-sm);
    width: 100%;
  }

  .product-actions .button {
    width: 100%;
  }

  .product-description {
    font-size: var(--font-size-md);
    padding-bottom: var(--spacing-lg);
    position: relative;
    margin: var(--spacing-xxl) 0 var(--spacing-lg);
  }

  .product-description.truncated {
    display: -webkit-box;
    -webkit-line-clamp: 8;
    -webkit-box-orient: vertical;
    overflow: hidden;
    padding-bottom: 0;

    &:after {
      content: '';
      display: block;
      height: 60px;
      width: 100%;
      background: linear-gradient(to bottom, transparent 0%, white 70%);
      position: absolute;
      bottom: 0;
      left: 0;
      right: 0;
      pointer-events: none;
      z-index: 5;
    }
  }

  .read-less-button {
    color: var(--color-dark);
    background: var(--color-light);
    padding: 0;
    cursor: pointer;
    margin-top: var(--spacing-xs);
    display: none;
  }

  .product-description.truncated .read-more-button {
    display: inline-block;
    position: absolute;
    bottom: 10px;
    right: 0;
    left: 0;
    height: 40px;
    width: 40px;
    margin: 0 auto;
    background: var(--color-dark);
    z-index: 10;
    padding: 0 var(--spacing-xs);
    display: flex;
    align-items: center;
    justify-content: center;
    border-radius: var(--br-md);
    box-shadow: var(--box-shadow);

    svg {
      width: 20px;
      height: 20px;
      fill: var(--color-light);
    }
  }

  .product-description.truncated .read-less-button {
    display: none;
  }

  .product-description .read-more-button {
    display: none;
  }

  .product-description .read-less-button {
    display: inline-block;
    position: absolute;
    bottom: -20px;
    right: 0;
    left: 0;
    height: 40px;
    width: 40px;
    margin: 0 auto;
    background: var(--color-light);
    z-index: 10;
    padding: 0 var(--spacing-xs);
    display: flex;
    align-items: center;
    justify-content: center;
    border-radius: var(--br-md);
    box-shadow: var(--box-shadow);

    svg {
      width: 20px;
      height: 20px;
      fill: var(--color-light);
    }
  }

  .product-option label {
    display: block;
    margin-bottom: var(--spacing-sm); /* Increased spacing */
    font-weight: 500;
  }

  .option-buttons-wrapper {
    display: flex;
    flex-wrap: wrap;
    gap: var(--spacing-sm);
    margin-bottom: var(--spacing-md); /* Add margin below the group */
  }

  .option-button {
    padding: var(--spacing-sm) var(--spacing-md);
    border: 1px solid var(--color-border);
    background-color: var(--color-light);
    color: var(--color-dark);
    cursor: pointer;
    border-radius: var(--br-sm);
    font-size: var(--font-size-sm);
    transition: background-color 0.2s ease, border-color 0.2s ease, color 0.2s ease;
    display: inline-flex; /* For color swatches */
    align-items: center; /* For color swatches */
    justify-content: center; /* For color swatches */
    min-width: 40px; /* Ensure buttons have some width */
    text-align: center;
  }

  .option-button:hover {
    border-color: var(--color-dark-hover);
    background-color: #e9ecef; /* Slightly darker light */
  }

  .option-button.active {
    background-color: var(--color-dark);
    color: var(--color-light);
    border-color: var(--color-dark);
  }

  .option-button.active:hover {
    background-color: var(--color-dark-hover);
    border-color: var(--color-dark-hover);
  }

  /* Styles for Color Swatch Buttons */
  .color-option-buttons-wrapper .option-button {
    padding: var(--spacing-xs); /* Smaller padding for color swatches */
    width: 40px; /* Fixed size for swatch button */
    height: 40px;
    border-radius: 50%; /* Make them circular */
    overflow: hidden;
  }

  .option-color-swatch {
    display: block;
    width: 100%;
    height: 100%;
    border-radius: 50%;
    border: 1px solid rgba(0, 0, 0, 0.1); /* Subtle border for light colors */
  }
  .option-button.active .option-color-swatch {
    outline: 2px solid var(--color-dark);
    outline-offset: 3px;
  }
  .color-option-buttons-wrapper .option-button.active {
    background-color: transparent; /* Parent active state might not be needed if swatch has outline */
    border-color: var(--color-dark); /* Or transparent if outline is enough */
  }

  .visually-hidden {
    position: absolute;
    width: 1px;
    height: 1px;
    margin: -1px;
    padding: 0;
    overflow: hidden;
    clip: rect(0, 0, 0, 0);
    border: 0;
  }
{% endstylesheet %}

<script>
  document.addEventListener('DOMContentLoaded', function() {
    // Product variants handling
    const variants = {{ product.variants | json }};
    const productOptions = {{ product.options_with_values | json }};
    
    // Get elements
    const optionButtonGroups = document.querySelectorAll('.option-buttons-wrapper'); // Changed selector
    const variantInput = document.getElementById('variant-id');
    const priceElement = document.getElementById('product-price');
    const mainImage = document.getElementById('main-product-image');
    const thumbnails = document.querySelectorAll('.thumbnail');
    const productDescription = document.querySelector('.product-description');
    const readMoreButton = document.querySelector('.read-more-button');
    const readLessButton = document.querySelector('.read-less-button');
    const addToCartButton = document.getElementById('add-to-cart');


    // Handle read more functionality
    if (readMoreButton && readLessButton && productDescription) {
      readMoreButton.addEventListener('click', function() {
        productDescription.classList.remove('truncated');
      });

      readLessButton.addEventListener('click', function() {
        productDescription.classList.add('truncated');
      });
    }
    
    // Initialize option state
    let selectedOptions = {};
    optionButtonGroups.forEach(group => {
      const activeButton = group.querySelector('.option-button.active');
      if (activeButton) {
        const optionName = activeButton.getAttribute('data-option-name').toLowerCase();
        selectedOptions[optionName] = activeButton.getAttribute('data-option-value');
      } else if (group.querySelector('.option-button')) {
        // If no active button, select the first one by default for initialization
        const firstButton = group.querySelector('.option-button');
        const optionName = firstButton.getAttribute('data-option-name').toLowerCase();
        selectedOptions[optionName] = firstButton.getAttribute('data-option-value');
        // firstButton.classList.add('active'); // Optionally activate the first one visually
      }
    });
    
    // Find the matching variant when options change
    function findVariantByOptions() {
      return variants.find(variant => {
        // Check if variant.options exists and has the same length as productOptions
        if (!variant.options || variant.options.length !== productOptions.length) {
          return false;
        }
        return productOptions.every((optionDetail, index) => {
          const optionNameKey = optionDetail.name.toLowerCase();
          // Ensure the selectedOptions[optionNameKey] is compared against the correct variant option
          // Shopify's variant.options is an array of strings ['Red', 'Small']
          return variant.options[index] === selectedOptions[optionNameKey];
        });
      });
    }

    // Placeholder for Shopify's formatMoney function
    function formatMoney(priceInCents, format) {
      if (typeof Shopify !== 'undefined' && Shopify.formatMoney) {
        return Shopify.formatMoney(priceInCents, format || "{{ shop.money_format }}");
      }
      const amount = (priceInCents / 100).toFixed(2);
      const currency = "{{ cart.currency.symbol }}"; // Get currency symbol
      return `${currency}${amount}`;
    }
    
    // Update the UI based on selected variant
    function updateVariantUI(variant) {
      const addToCartButton = document.getElementById('add-to-cart');
      const paymentButton = document.querySelector('.shopify-payment-button');

      if (!variant) {
        if (variantInput) variantInput.value = '';
        if (priceElement) priceElement.innerHTML = 'Unavailable';
        if (addToCartButton) {
          addToCartButton.disabled = true;
          addToCartButton.textContent = 'Unavailable';
        }
        if (paymentButton) paymentButton.style.display = 'none';
        return;
      }
      
      if (variantInput) variantInput.value = variant.id;
      if (priceElement) {
         let priceHTML = formatMoney(variant.price);
         if (variant.compare_at_price && variant.compare_at_price > variant.price) {
           priceHTML += ` <span class="compare-at">${formatMoney(variant.compare_at_price)}</span>`;
         }
         priceElement.innerHTML = priceHTML;
      }
      
      if (variant.available) {
        if (addToCartButton) {
          addToCartButton.disabled = false;
          addToCartButton.textContent = 'Add to cart';
        }
        if (paymentButton) paymentButton.style.display = 'block'; // Or 'inline-block', etc.
      } else {
        if (addToCartButton) {
          addToCartButton.disabled = true;
          addToCartButton.textContent = 'Sold Out';
        }
        if (paymentButton) paymentButton.style.display = 'none';
      }

      if (variant.featured_image && variant.featured_image.src) {
        updateMainImage(variant.featured_image.src);
        thumbnails.forEach(t => t.classList.remove('active'));
        const activeThumbnail = document.querySelector(`.thumbnail[data-image-id="${variant.featured_image.id}"]`);
        if (activeThumbnail) {
          activeThumbnail.classList.add('active');
        }
      }
    }
    
    // Handle option button click
    function handleOptionButtonClick(e) {
      const clickedButton = e.target.closest('.option-button');
      if (!clickedButton) return;

      const optionName = clickedButton.getAttribute('data-option-name').toLowerCase();
      const optionValue = clickedButton.getAttribute('data-option-value');

      selectedOptions[optionName] = optionValue;

      // Update active class for buttons in the same group
      const buttonGroup = clickedButton.closest('.option-buttons-wrapper');
      buttonGroup.querySelectorAll('.option-button').forEach(button => {
        button.classList.remove('active');
      });
      clickedButton.classList.add('active');
      
      const variant = findVariantByOptions();
      updateVariantUI(variant);
    }
    
    // Update main product image
    function updateMainImage(imageUrl) {
      if (mainImage && imageUrl) {
        mainImage.src = imageUrl;
      }
    }

    // Attach event listeners to option buttons
    optionButtonGroups.forEach(group => {
      group.addEventListener('click', handleOptionButtonClick);
    });

    // Attach event listeners to thumbnails
    thumbnails.forEach(thumbnail => {
      thumbnail.addEventListener('click', function(e) {
        e.preventDefault();
        const newImageUrl = this.getAttribute('data-image-url');
        updateMainImage(newImageUrl);
        thumbnails.forEach(t => t.classList.remove('active'));
        this.classList.add('active');
      });
    });

    // Initial UI update
    const initialVariant = findVariantByOptions();
    updateVariantUI(initialVariant);

  });
</script>

{% schema %}
{
  "name": "t:general.product",
  "settings": [],
  "disabled_on": {
    "groups": ["header", "footer"]
  }
}
{% endschema %}
