{% comment %}
  This section is used in the product template to render product page with
  media, content, and add-to-cart form.

  https://shopify.dev/docs/storefronts/themes/architecture/templates/product
{% endcomment %}

<div class="product-bg-text">
  {{ product.title | escape }}
</div>

<div class="product-section">
  <div class="product-images">
    {% assign featured_image = product.selected_or_first_available_variant.featured_image
      | default: product.featured_image
    %}
    <div class="main-image">
      <img
        id="main-product-image"
        src="{{ featured_image | img_url: 'master' }}"
        alt="{{ featured_image.alt | escape }}"
        class="product-image"
      >
    </div>
    <div class="thumbnail-container">
      {% for image in product.images %}
        <div class="thumbnail" data-image-id="{{ image.id }}" data-image-url="{{ image | img_url: 'master' }}">
          <img src="{{ image | img_url: 'small' }}" alt="{{ image.alt | escape }}">
        </div>
      {% endfor %}
    </div>
  </div>

  <div class="product-info">
    {% comment %} I need to make this only show if the product is in stock {% endcomment %}

    <div class="made-by">Miserably Employed Exclusive</div>
    <h1 class="product-title">{{ product.title }}</h1>

    <p id="product-price" class="product-price">
      {{ product.selected_or_first_available_variant.price | money }}
      {% if product.selected_or_first_available_variant.compare_at_price
          != product.selected_or_first_available_variant.price
      %}
        <span class="compare-at">{{ product.selected_or_first_available_variant.compare_at_price | money }}</span>
      {% endif %}
    </p>
    <div class="product-description truncated">
      {{ product.description }}
      <button class="read-more-button">
        {{ 'icon-plus.svg' | inline_asset_content }}
      </button>

      <button class="read-less-button">
        {{ 'icon-minus.svg' | inline_asset_content }}
      </button>
    </div>

    <div class="product-form">
      {% form 'product', product %}
        {% assign current_variant = product.selected_or_first_available_variant %}
        <input type="hidden" name="id" id="variant-id" value="{{ current_variant.id }}">

        {%- for option in product.options_with_values -%}
          <div class="product-option">
            <label for="option-{{ forloop.index }}">{{ option.name }}</label>
            <div class="option-wrapper {% if option.name contains 'Color' %}color-option-wrapper{% endif %}">
              <select
                id="option-{{ forloop.index }}"
                class="option-selector"
                data-option-index="{{ forloop.index0 }}"
                data-option-name="{{ option.name | handleize }}"
              >
                {%- for value in option.values -%}
                  <option
                    value="{{ value | escape }}"
                    {% if option.selected_value == value %}
                      selected="selected"
                    {% endif %}
                  >
                    {{ value }}
                  </option>
                {%- endfor -%}
              </select>
            </div>
          </div>
        {%- endfor -%}

        <div class="quantity-selector">
          <label for="quantity">Quantity</label>
          <input type="number" id="quantity" name="quantity" min="1" value="1">
        </div>

        <div class="product-actions">
          <button type="submit" id="add-to-cart" class="button bright">Add to cart</button>
          {{ form | payment_button }}
        </div>
      {% endform %}
    </div>
  </div>
</div>

{% stylesheet %}
  .product-bg-text {
    color: white;
    background-color: white;
    text-shadow: -1px -1px 0 #000, 1px -1px 0 #000, -1px 1px 0 #000, 1px 1px 0 #000;
    font-size: 20rem;
    text-wrap: nowrap;
    position: absolute;
    font-weight: bold;
    top: -2rem;
    left: -30%;
    right: -1vw;
    z-index: -1;
    pointer-events: none;
    opacity: 0.1;
    width: 100vw;
    text-align: center;
    transform: rotate(-10deg);
  }

  .made-by {
    font-size: var(--font-size-md);
    font-weight: 500;
    color: var(--color-secondary);
    margin-bottom: var(--spacing-sm);
  }

  .product-title {
    font-size: var(--font-size-xl);
    text-transform: uppercase;
    font-weight: 900;
    font-style: italic;
    letter-spacing: -0.05em;
    margin: 0;
    text-align: left;
    width: 100%;
    color: var(--color-dark);
  }

  .product-section {
    display: flex;
    flex-direction: row;
    align-items: flex-start;
    justify-content: flex-start;
    gap: var(--spacing-xl);
    margin-bottom: var(--spacing-xxl);
    padding: 0 0 var(--spacing-xxl);

    @media screen and (max-width: 1024px) {
      gap: var(--spacing-lg);
    }
  }

  @media screen and (max-width: 1024px) {
    .product-section {
      flex-direction: column;
      padding: 0;
    }
  }

  .product-images {
    display: flex;
    flex-direction: column;
    gap: var(--spacing-md);
    width: 65%;

    @media screen and (max-width: 1024px) {
      width: 100%;
    }
  }

  .main-image {
    width: 100%;
    margin-bottom: var(--spacing-sm);
    outline: 1px solid rgba(0, 0, 0, 0.1);
    border-radius: var(--br-md);
  }

  .main-image img {
    width: 100%;
    height: auto;
    object-fit: cover;
  }

  .thumbnail-container {
    display: flex;
    flex-direction: row;
    justify-content: flex-start;
    align-items: center;
    gap: var(--spacing-sm);
    flex-wrap: wrap;
    justify-content: center;
  }

  .thumbnail {
    width: 60px;
    height: 60px;
    cursor: pointer;
    overflow: hidden;
    outline: 1px solid rgba(0, 0, 0, 0.1);
    outline-offset: -1px;
    transition: border 0.1s ease, outline 0.1s ease;
  }

  .thumbnail img {
    width: 100%;
    height: 100%;
    object-fit: cover;
    transition: transform 0.2s ease;
  }

  .thumbnail.active {
    border: 2px solid var(--color-dark);
    outline: 2px solid rgba(255, 255, 255, 1);
    outline-offset: -3px;
  }

  .product-info {
    width: 35%;
    padding: 0;
    display: flex;
    flex-direction: column;
    gap: var(--spacing-sm);
    align-items: flex-start;

    @media screen and (max-width: 1024px) {
      width: 100%;
    }

    .product-description {
      font-size: var(--font-size-md);
      margin-bottom: var(--spacing-lg);
    }

    .product-price {
      font-size: var(--font-size-lg);
      font-weight: bold;
      margin-bottom: var(--spacing-md);
    }

    .compare-at {
      text-decoration: line-through;
      color: var(--color-secondary);
      margin-left: var(--spacing-xs);
    }

    .product-form {
      width: 100%;
    }
  }

  @media screen and (max-width: 768px) {
    .product-images,
    .product-info {
      width: 100%;
    }
  }

  .product-option {
    margin-bottom: var(--spacing-md);
    width: 100%;
  }

  .product-option label {
    display: block;
    margin-bottom: var(--spacing-xs);
    font-weight: 500;
  }

  .option-wrapper {
    position: relative;
  }

  .option-selector {
    width: 100%;
  }

  .quantity-selector {
    margin-bottom: var(--spacing-md);
    width: 100%;
  }

  .quantity-selector label {
    display: block;
    margin-bottom: var(--spacing-xs);
    font-weight: 500;
  }

  .quantity-selector input {
    width: 100%;
  }

  .product-actions {
    display: flex;
    flex-direction: column;
    align-items: center;
    justify-content: center;
    gap: var(--spacing-sm);
    width: 100%;
  }

  .product-actions .button {
    width: 100%;
  }

  .product-description {
    font-size: var(--font-size-lg);
    margin-bottom: var(--spacing-lg);
    padding-bottom: var(--spacing-lg);
    position: relative;
  }

  .product-description.truncated {
    display: -webkit-box;
    -webkit-line-clamp: 8;
    -webkit-box-orient: vertical;
    overflow: hidden;
    padding-bottom: 0;

    &:after {
      content: '';
      display: block;
      height: 60px;
      width: 100%;
      background: linear-gradient(to bottom, transparent 0%, white 70%);
      position: absolute;
      bottom: 0;
      left: 0;
      right: 0;
      pointer-events: none;
      z-index: 5;
    }
  }

  .read-less-button {
    color: var(--color-dark);
    background: var(--color-light);
    padding: 0;
    cursor: pointer;
    margin-top: var(--spacing-xs);
    display: none;
  }

  .product-description.truncated .read-more-button {
    display: inline-block;
    position: absolute;
    bottom: 10px;
    right: 0;
    left: 0;
    height: 40px;
    width: 40px;
    margin: 0 auto;
    background: var(--color-dark);
    z-index: 10;
    padding: 0 var(--spacing-xs);
    display: flex;
    align-items: center;
    justify-content: center;
    border-radius: var(--br-md);
    box-shadow: var(--box-shadow);

    svg {
      width: 20px;
      height: 20px;
      fill: var(--color-light);
    }
  }

  .product-description.truncated .read-less-button {
    display: none;
  }

  .product-description .read-more-button {
    display: none;
  }

  .product-description .read-less-button {
    display: inline-block;
    position: absolute;
    bottom: -20px;
    right: 0;
    left: 0;
    height: 40px;
    width: 40px;
    margin: 0 auto;
    background: var(--color-light);
    z-index: 10;
    padding: 0 var(--spacing-xs);
    display: flex;
    align-items: center;
    justify-content: center;
    border-radius: var(--br-md);
    box-shadow: var(--box-shadow);

    svg {
      width: 20px;
      height: 20px;
      fill: var(--color-light);
    }
  }
{% endstylesheet %}

<script>
  document.addEventListener('DOMContentLoaded', function() {
    // Product variants handling
    const variants = {{ product.variants | json }};
    const productOptions = {{ product.options_with_values | json }};
    // const variantImages = {}; // This map can be simplified if using variant.featured_image directly

    // {% for variant in product.variants %}
    //   {% if variant.image.id %}
    //     variantImages[{{ variant.id }}] = {{ variant.image.id }};
    //   {% endif %}
    // {% endfor %}
    
    // Get elements
    const optionSelectors = document.querySelectorAll('.option-selector');
    const variantInput = document.getElementById('variant-id');
    const priceElement = document.getElementById('product-price');
    const mainImage = document.getElementById('main-product-image');
    const thumbnails = document.querySelectorAll('.thumbnail');
    const productDescription = document.querySelector('.product-description');
    const readMoreButton = document.querySelector('.read-more-button');
    const readLessButton = document.querySelector('.read-less-button');

    // Handle read more functionality
    readMoreButton.addEventListener('click', function() {
      productDescription.classList.remove('truncated');
    });

    readLessButton.addEventListener('click', function() {
      productDescription.classList.add('truncated');
    });
    
    // Initialize option state
    let selectedOptions = {};
    optionSelectors.forEach(selector => {
      const optionName = selector.getAttribute('data-option-name').toLowerCase(); // Use lowercase key
      selectedOptions[optionName] = selector.value;
    });
    
    // Find the matching variant when options change
    function findVariantByOptions() {
      return variants.find(variant => {
        return productOptions.every((option, index) => {
          const optionNameKey = option.name.toLowerCase(); // Access selectedOptions with lowercase key
          // Ensure variant.options[index] exists and matches.
          // Shopify's variant.options array directly corresponds to product.options_with_values by index.
          return variant.options[index] === selectedOptions[optionNameKey];
        });
      });
    }

    // Placeholder for Shopify's formatMoney function if not globally available
    function formatMoney(priceInCents, format) {
      // This is a simplified version. Use Shopify's actual formatMoney or a robust library.
      if (typeof Shopify !== 'undefined' && Shopify.formatMoney) {
        return Shopify.formatMoney(priceInCents, format || "{{ shop.money_format }}");
      }
      const amount = (priceInCents / 100).toFixed(2);
      return `$${amount}`; // Basic fallback
    }
    
    // Update the UI based on selected variant
    function updateVariantUI(variant) {
      if (!variant) {
        // Handle case where no matching variant is found (e.g., disable add to cart)
        if (variantInput) variantInput.value = '';
        if (priceElement) priceElement.innerHTML = 'Unavailable'; // Or some other indicator
        return;
      }
      
      if (variantInput) variantInput.value = variant.id;
      if (priceElement) priceElement.innerHTML = formatMoney(variant.price);
      
      // Update image using the variant's featured_image
      if (variant.featured_image && variant.featured_image.src) {
        updateMainImage(variant.featured_image.src);
        
        thumbnails.forEach(t => t.classList.remove('active'));
        const activeThumbnail = document.querySelector(`.thumbnail[data-image-id="${variant.featured_image.id}"]`);
        if (activeThumbnail) {
          activeThumbnail.classList.add('active');
        }
      } else {
        // Optional: Fallback if the variant has no specific image.
        // You might want to revert to the main product image or do nothing.
        // If product.featured_media.preview_image.url is available and mainImage is set up for it:
        // updateMainImage( {{ product.featured_media.preview_image.url | json }} );
      }
    }
    
    // Handle option change
    function handleOptionChange(e) {
      const selector = e.target;
      const optionName = selector.getAttribute('data-option-name').toLowerCase(); // Use lowercase key
      selectedOptions[optionName] = selector.value;
      
      const variant = findVariantByOptions();
      updateVariantUI(variant);
    }
    
    // Update main product image
    function updateMainImage(imageUrl) {
      if (mainImage && imageUrl) {
        mainImage.src = imageUrl;
        // If you use srcset for responsive images, update that too.
        // e.g., mainImage.srcset = imageUrl; // Or a more complex update
      }
    }

    // Attach event listeners to option selectors
    optionSelectors.forEach(selector => {
      selector.addEventListener('change', handleOptionChange);
    });

    // Attach event listeners to thumbnails
    thumbnails.forEach(thumbnail => {
      thumbnail.addEventListener('click', function(e) {
        e.preventDefault();
        const newImageUrl = this.getAttribute('data-image-url'); // Or this.href if it's an <a> tag
        updateMainImage(newImageUrl);
        thumbnails.forEach(t => t.classList.remove('active'));
        this.classList.add('active');
        
        // Optional: If clicking a thumbnail should also select a variant,
        // you'd need more complex logic here to find a variant associated with this image
        // and then update options and call updateVariantUI.
        // For now, it just changes the main image.
      });
    });

    // Initial UI update based on pre-selected options (if any)
    const initialVariant = findVariantByOptions();
    if (initialVariant) {
      updateVariantUI(initialVariant);
    } else if (variants.length > 0) {
      // If no specific variant matches initial selections, maybe default to the first available variant
      // updateVariantUI(variants[0]); // Uncomment if you want this behavior
    }

  });
</script>

{% schema %}
{
  "name": "t:general.product",
  "settings": [],
  "disabled_on": {
    "groups": ["header", "footer"]
  }
}
{% endschema %}
